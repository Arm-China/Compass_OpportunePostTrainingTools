<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1051px" height="1054px" viewBox="-0.5 -0.5 1051 1054" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-12-08T11:30:39.386Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/14.1.8 Chrome/87.0.4280.88 Electron/11.1.1 Safari/537.36&quot; etag=&quot;PjvIzdl1C09hSPqsBXT-&quot; version=&quot;14.1.8&quot; type=&quot;device&quot; pages=&quot;2&quot;&gt;&lt;diagram id=&quot;J-2Vz7SI2Rgns56PnIZN&quot; name=&quot;control_flow&quot;&gt;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&lt;/diagram&gt;&lt;diagram id=&quot;AMo__D1407YUqmT0gOu9&quot; name=&quot;uml&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs><clipPath id="mx-clip-4-31-122-254-0"><rect x="4" y="31" width="122" height="254"/></clipPath><clipPath id="mx-clip-434-751-152-54-0"><rect x="434" y="751" width="152" height="54"/></clipPath><clipPath id="mx-clip-829-751-152-84-0"><rect x="829" y="751" width="152" height="84"/></clipPath><clipPath id="mx-clip-164-31-232-594-0"><rect x="164" y="31" width="232" height="594"/></clipPath><clipPath id="mx-clip-164-633-232-62-0"><rect x="164" y="633" width="232" height="62"/></clipPath><clipPath id="mx-clip-444-31-272-464-0"><rect x="444" y="31" width="272" height="464"/></clipPath><clipPath id="mx-clip-444-503-272-192-0"><rect x="444" y="503" width="272" height="192"/></clipPath><clipPath id="mx-clip-774-31-272-84-0"><rect x="774" y="31" width="272" height="84"/></clipPath><clipPath id="mx-clip-774-123-272-182-0"><rect x="774" y="123" width="272" height="182"/></clipPath><clipPath id="mx-clip-771-367-272-24-0"><rect x="771" y="367" width="272" height="24"/></clipPath><clipPath id="mx-clip-771-399-272-142-0"><rect x="771" y="399" width="272" height="142"/></clipPath><clipPath id="mx-clip-4-751-272-114-0"><rect x="4" y="751" width="272" height="114"/></clipPath><clipPath id="mx-clip-4-873-272-182-0"><rect x="4" y="873" width="272" height="182"/></clipPath></defs><g><path d="M 0 26 L 0 0 L 130 0 L 130 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 0 26 L 0 280 L 130 280 L 130 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 26 L 130 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="64.5" y="17.5">Dtype</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-31-122-254-0)" font-size="12px"><text x="5.5" y="43.5">BOOL = ...</text><text x="5.5" y="57.5">UINT8 = ...</text><text x="5.5" y="71.5">INT8 = ...</text><text x="5.5" y="85.5">UINT16 = ...</text><text x="5.5" y="99.5">INT16 = ...</text><text x="5.5" y="113.5">UINT32 = ...</text><text x="5.5" y="127.5">INT32 = ...</text><text x="5.5" y="141.5">UINT64 = ...</text><text x="5.5" y="155.5">INT64 = ...</text><text x="5.5" y="169.5">FP16 = ...</text><text x="5.5" y="183.5">FP32 = ...</text><text x="5.5" y="197.5">FP64 = ...</text><text x="5.5" y="211.5">BFP16 = ...</text><text x="5.5" y="225.5">ALIGNED_INT4 = ...</text><text x="5.5" y="239.5">ALIGNED_UINT4 = ...</text><text x="5.5" y="253.5">ALIGNED_INT12 = ...</text><text x="5.5" y="267.5">ALIGNED_UINT12 = ...</text></g><path d="M 430 746 L 430 720 L 590 720 L 590 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 430 746 L 430 800 L 590 800 L 590 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 430 746 L 590 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="509.5" y="737.5">torch.utils.data.Dataset</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-434-751-152-54-0)" font-size="12px"><text x="435.5" y="763.5">__init__()</text><text x="435.5" y="777.5">__len__()</text><text x="435.5" y="791.5">__getitem__()</text></g><path d="M 400 860 L 400 773 L 423.63 773" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 428.88 773 L 421.88 776.5 L 423.63 773 L 421.88 769.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 320 886 L 320 860 L 480 860 L 480 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 320 886 L 320 910 L 480 910 L 480 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 320 886 L 480 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="399.5" y="877.5">NumpyMultiInputDataset</text></g><path d="M 615 860 L 615 773 L 596.37 773" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 591.12 773 L 598.12 769.5 L 596.37 773 L 598.12 776.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 560 886 L 560 860 L 670 860 L 670 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 560 886 L 560 910 L 670 910 L 670 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 560 886 L 670 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="614.5" y="877.5">NumpyDataset</text></g><path d="M 825 746 L 825 720 L 985 720 L 985 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 825 746 L 825 830 L 985 830 L 985 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 825 746 L 985 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="904.5" y="737.5">OptBaseMetric</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-829-751-152-84-0)" font-size="12px"><text x="830.5" y="763.5">__init__()</text><text x="830.5" y="777.5">__call__()</text><text x="830.5" y="791.5">compute()</text><text x="830.5" y="805.5">reset()</text><text x="830.5" y="819.5">report()</text></g><path d="M 800 860 L 800 788 L 818.63 788" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 823.88 788 L 816.88 791.5 L 818.63 788 L 816.88 784.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 735 886 L 735 860 L 865 860 L 865 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 735 886 L 735 910 L 865 910 L 865 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 735 886 L 865 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="799.5" y="877.5">CosDistanceMetric</text></g><path d="M 1005 860 L 1005 788 L 991.37 788" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 986.12 788 L 993.12 784.5 L 991.37 788 L 993.12 791.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 960 886 L 960 860 L 1050 860 L 1050 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 960 886 L 960 910 L 1050 910 L 1050 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 960 886 L 1050 886" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1004.5" y="877.5">TopKMetric</text></g><path d="M 160 26 L 160 0 L 400 0 L 400 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 160 26 L 160 690 L 400 690 L 400 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 160 26 L 400 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="279.5" y="17.5">PyTensor</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-164-31-232-594-0)" font-size="12px"><text x="165.5" y="43.5">name : string</text><text x="165.5" y="57.5">#hold the specific data</text><text x="165.5" y="71.5">betensor : torch.Tensor</text><text x="165.5" y="85.5">#the nominal data type of tensor, </text><text x="165.5" y="99.5">#not consistent with the data type </text><text x="165.5" y="113.5">#of betensor</text><text x="165.5" y="127.5">dtype : Dtype</text><text x="165.5" y="141.5">#quantization properties</text><text x="165.5" y="155.5">scale : float or torch.Tensor</text><text x="165.5" y="169.5">zerop : int or torch.Tensor</text><text x="165.5" y="183.5">qbits : int</text><text x="165.5" y="197.5">qmin : int</text><text x="165.5" y="211.5">qmax : int</text><text x="165.5" y="225.5">qinvariant: bool</text><text x="165.5" y="239.5">#store the basic information in original IR</text><text x="165.5" y="253.5">ir_shape : TensorShape</text><text x="165.5" y="267.5">ir_dtype: Dtype</text><text x="165.5" y="281.5">#statistic properties</text><text x="165.5" y="295.5">extrema_min_key_axis: torch.Tensor</text><text x="165.5" y="309.5">extrema_max_key_axis: torch.Tensor</text><text x="165.5" y="323.5">running_min_key_axis : torch.Tensor</text><text x="165.5" y="337.5">running_max_key_axis : torch.Tensor</text><text x="165.5" y="351.5">running_mean_key_axis : torch.Tensor</text><text x="165.5" y="365.5">running_std_key_axis : torch.Tensor</text><text x="165.5" y="379.5">running_mad_key_axis : torch.Tensor</text><text x="165.5" y="393.5">running_histc_key_axis : torch.Tensor</text><text x="165.5" y="407.5">extrema_min: float</text><text x="165.5" y="421.5">extrema_max: float</text><text x="165.5" y="435.5">running_min : float</text><text x="165.5" y="449.5">running_max : float</text><text x="165.5" y="463.5">running_mean : float</text><text x="165.5" y="477.5">running_std : float</text><text x="165.5" y="491.5">running_mad : float</text><text x="165.5" y="505.5">running_histc : torch.Tensor</text><text x="165.5" y="519.5">min: float</text><text x="165.5" y="533.5">max: float</text><text x="165.5" y="547.5">min_key_axis: torch.Tensor</text><text x="165.5" y="561.5">max_key_axis: torch.Tensor</text><text x="165.5" y="575.5">#records for dev</text><text x="165.5" y="589.5">similarity: float</text><text x="165.5" y="603.5">debug_flag: int</text><text x="165.5" y="617.5">need_deleted: bool</text></g><path d="M 160 624 L 400 624" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-164-633-232-62-0)" font-size="12px"><text x="165.5" y="645.5">__init__()</text><text x="165.5" y="659.5">clone()</text><text x="165.5" y="673.5">statistic()</text></g><path d="M 440 26 L 440 0 L 720 0 L 720 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 440 26 L 440 690 L 720 690 L 720 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 440 26 L 720 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="579.5" y="17.5">PyNode</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-444-31-272-464-0)" font-size="12px"><text x="445.5" y="43.5">name : string</text><text x="445.5" y="57.5">type : OpType</text><text x="445.5" y="85.5">inputs : (PyTensor)</text><text x="445.5" y="99.5">outputs : (PyTensor)</text><text x="445.5" y="113.5">placeholders : [PyTensor]</text><text x="445.5" y="127.5">constants : {string : PyTensor}</text><text x="445.5" y="141.5">parents : (PyNode)</text><text x="445.5" y="155.5">children : (PyNode)</text><text x="445.5" y="169.5">graph: PyGraph</text><text x="445.5" y="183.5">#store fields that will be wrote to IR</text><text x="445.5" y="197.5">params : dict</text><text x="445.5" y="211.5">    - params['method'] : string</text><text x="445.5" y="225.5">    ......</text><text x="445.5" y="239.5">#store dev configurations or status that will not</text><text x="445.5" y="253.5">#write to IR</text><text x="445.5" y="267.5">attrs : dict</text><text x="445.5" y="281.5">    - attrs['quantized'] : bool</text><text x="445.5" y="295.5">    #calibration strategy</text><text x="445.5" y="309.5">    - attrs['q_strategy_activation'] : string</text><text x="445.5" y="323.5">    - attrs['q_strategy_weight'] : string</text><text x="445.5" y="337.5">    - attrs['q_strategy_bias'] : string</text><text x="445.5" y="351.5">    #quantization method</text><text x="445.5" y="365.5">    - attrs['q_mode_activation'] : string</text><text x="445.5" y="379.5">    - attrs['q_mode_weight'] : string</text><text x="445.5" y="393.5">    - attrs['q_mode_bias'] : string</text><text x="445.5" y="407.5">    #quantization bit</text><text x="445.5" y="421.5">    - attrs['lut_items_in_bits'] : int</text><text x="445.5" y="435.5">    - attrs['q_bits_activation'] : int</text><text x="445.5" y="449.5">    - attrs['q_bits_weight'] : int</text><text x="445.5" y="463.5">    - attrs['q_bits_bias'] : int</text><text x="445.5" y="477.5">    ......</text></g><path d="M 440 494 L 720 494" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-444-503-272-192-0)" font-size="12px"><text x="445.5" y="515.5">__init__()</text><text x="445.5" y="529.5">clone()</text><text x="445.5" y="543.5">add_input()</text><text x="445.5" y="557.5">add_output()</text><text x="445.5" y="571.5">remove_input()</text><text x="445.5" y="585.5">remove_output()</text><text x="445.5" y="599.5">replace_input_temporarily()</text><text x="445.5" y="613.5">replace_output_temporarily()</text><text x="445.5" y="627.5">get_param()</text><text x="445.5" y="641.5">get_attrs()</text><text x="445.5" y="655.5">get_constant()</text><text x="445.5" y="669.5">forward()</text><text x="445.5" y="683.5">quantize()</text></g><path d="M 770 26 L 770 0 L 1050 0 L 1050 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 770 26 L 770 300 L 1050 300 L 1050 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 770 26 L 1050 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="909.5" y="17.5">PyGraph</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-774-31-272-84-0)" font-size="12px"><text x="775.5" y="43.5">name : string</text><text x="775.5" y="57.5">net_ : networkx.DiGraph</text><text x="775.5" y="71.5">nodes : [PyNode]</text><text x="775.5" y="85.5">input_tensors : (PyTensor)</text><text x="775.5" y="99.5">output_tensors : (PyTensor)</text></g><path d="M 770 114 L 1050 114" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-774-123-272-182-0)" font-size="12px"><text x="775.5" y="135.5">__init__()</text><text x="775.5" y="149.5">clone()</text><text x="775.5" y="163.5">tensors()</text><text x="775.5" y="177.5">get_valid_node_name()</text><text x="775.5" y="191.5">get_valid_tensor_name()</text><text x="775.5" y="205.5">add_node()</text><text x="775.5" y="219.5">remove_node()</text><text x="775.5" y="233.5">replace_node_safely()</text><text x="775.5" y="247.5">forward()</text><text x="775.5" y="261.5">to_torch_module()</text><text x="775.5" y="275.5">serialize()</text><text x="775.5" y="289.5">parse()</text></g><path d="M 907 336 L 907 316 L 906.95 305.46" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 906.93 300.21 L 910.46 307.19 L 906.95 305.46 L 903.46 307.22 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 767 362 L 767 336 L 1047 336 L 1047 362" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 767 362 L 767 536 L 1047 536 L 1047 362" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 767 362 L 1047 362" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="906.5" y="353.5">QuantizeGraph</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-771-367-272-24-0)" font-size="12px"><text x="772.5" y="379.5">quantgraph : QuantizeGraph</text></g><path d="M 767 390 L 1047 390" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-771-399-272-142-0)" font-size="12px"><text x="772.5" y="411.5">feed_inputs_data()</text><text x="772.5" y="425.5">load_statistic_info()</text><text x="772.5" y="439.5">save_statistic_info()</text><text x="772.5" y="453.5">set_tensor_quantization_attrs()</text><text x="772.5" y="467.5">clear_tensor_quantization_attrs()</text><text x="772.5" y="481.5">statistic()</text><text x="772.5" y="495.5">quantize()</text><text x="772.5" y="509.5">qforward()</text><text x="772.5" y="523.5">insert_dummy_node_ahead()</text></g><path d="M 0 746 L 0 720 L 280 720 L 280 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 746 L 0 1050 L 280 1050 L 280 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 746 L 280 746" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="139.5" y="737.5">OptMaster</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-751-272-114-0)" font-size="12px"><text x="5.5" y="763.5">g : QuantizeGraph</text><text x="5.5" y="777.5">calibration_dataloader : torch.utils.data.Dataloader</text><text x="5.5" y="791.5">validation_dataloader : torch.utils.data.Dataloader</text><text x="5.5" y="805.5">validation_metrics : [OptBaseMetric]</text><text x="5.5" y="819.5">hparams : dict</text><text x="5.5" y="833.5">fake_quant_scopes : [(int, int)]</text><text x="5.5" y="847.5">op_need_cast_dtypes_for_lib : set</text></g><path d="M 0 864 L 280 864" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-873-272-182-0)" font-size="12px"><text x="5.5" y="885.5">prepare()</text><text x="5.5" y="899.5">graph_optimize_stage1()</text><text x="5.5" y="913.5">graph_optimize_stage2()</text><text x="5.5" y="927.5">graph_optimize_stage3()</text><text x="5.5" y="941.5">statistic()</text><text x="5.5" y="955.5">quantize()</text><text x="5.5" y="969.5">collect_information_for_debug()</text><text x="5.5" y="983.5">optimize()</text><text x="5.5" y="997.5">metric()</text><text x="5.5" y="1011.5">serialize()</text><text x="5.5" y="1025.5">report()</text><text x="5.5" y="1039.5">dump()</text></g></g></svg>